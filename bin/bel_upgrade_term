#!/usr/bin/env ruby
# bel_upgrade_term: Upgrade BEL terms to a new set of resources.
#
# Terms as CLI option.
# usage: bel_upgrade_term -t "p(HGNC:A2LD1)" -n "1.0" -c change_log.json
#
# Terms from standard in.
# usage: echo -e "p(EGID:84)\np(HGNC:A2LD1)" | bel_upgrade_term -n "1.0" -c change_log.json
# usage: cat terms.bel | bel_upgrade_term -n "1.0" -c change_log.json

require 'bel'
require 'json'
require 'optparse'
require 'set'
require 'open-uri'

# setup and parse options
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: bel_upgrade [options] [.bel file]"
  opts.on('-t', '--terms TERM[\nTERM...]', 'BEL terms to upgrade (line-separated).') do |terms|
    options[:terms] = terms
  end
  opts.on('-n', '--nsversion NAMESPACE VERSION', 'Assume BEL is described by this namespace version.') do |nsv|
    options[:namespace_version] = nsv
  end
  opts.on("-c", "--changelog [FILE | URI]", "Change log JSON.") do |change_log|
    options['change_log'] = change_log
  end
end.parse!

# option guards
if not options[:namespace_version]
  $stderr.puts "The --nsversion option is required. Use -h / --help for details."
  exit 1
end
unless options[:terms] or not STDIN.tty?
  $stderr.puts "No bel terms provided; try --term, or STDIN (standard in). Use -h / --help for details."
  exit 1
end
unless options['change_log']
  $stderr.puts "Missing --changelog option. Use -h / --help for details."
  exit 1
end
if not File.exists? options['change_log']
  begin
    open(options['change_log']) do |f|
      unless f.content_type == 'application/json'
        $stderr.puts "Expected application/json content type, actual: #{f.content_type}"
        exit 1
      end
    end
  rescue OpenURI::HTTPError => e
    $stderr.puts "Cannot read URI for change_log, #{options['change_log']}, status: #{e}"
    exit 1
  end
end

# read bel content
content =
if options[:terms]
  options[:terms]
else
  $stdin.read
end

if content.strip().empty?
  $stderr.puts "Empty bel term content. Check input."
end
content += "\n"

# read change log
changelog = nil
if File.exists? options['change_log']
  File.open(options['change_log']) do |f|
    changelog = JSON.parse(f.read)
  end
else
  open(options['change_log']) do |file|
    changelog = JSON.parse(file.read)
  end
end

unless changelog
  $stderr.puts "Cannot retrieve change_log #{options['change_log']}"
end

class Main

  LostReplaceValues = ['unresolved', 'withdrawn']
  attr_reader :ttl

  def initialize(nsversion, content, change_log)
    @change_log = change_log
    @redefine_section = @change_log['redefine']
    BEL::Script.parse(content, ResourceIndex.openbel_published_index(nsversion)) do |obj|
      if obj.is_a? Parameter and obj.ns
        # first try replacing by existing namespace prefix...
        prefix = obj.ns.prefix.to_s
        replacements = @change_log[prefix]
        if replacements
          replacement_value = replacements[obj.value]
          if replacement_value
            if LostReplaceValues.include? replacement_value
              $stderr.puts "no replacement value for #{obj.ns} '#{obj.value}' - value '#{replacement_value}'"
            else
              obj.value = replacement_value
            end
          end
        end

        # ...then change namespace if redefined...
        if @redefine_section
          redefinition = @redefine_section[prefix]
          if redefinition
            new_prefix = redefinition['new_keyword']
            new_url = redefinition['new_url']
            obj.ns = NamespaceDefinition.new(new_prefix, new_url)

            # ...and replace value using new namespace prefix
            replacements = @change_log[new_prefix]
            if replacements
              replacement_value = replacements[obj.value]
              if replacement_value
                if LostReplaceValues.include? replacement_value
                  $stderr.puts "no replacement value for #{obj.ns} '#{obj.value}' - value '#{replacement_value}'"
                else
                  obj.value = replacement_value
                end
              end
            end
          end
        end
      end

      # do not print Parameter and Term; they are included in Statement
      if obj.is_a? Term
        puts obj.to_bel
      end
    end
  end

  private

  def error_file(file_name)
    $stderr.puts "#{file_name} is not readable"
    exit 1
  end
end

Main.new(options[:namespace_version], content, changelog)
# vim: ts=2 sw=2:
# encoding: utf-8
