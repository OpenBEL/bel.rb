#!/usr/bin/env ruby
require 'bel'
require 'bel/vendor/trollop'

VERSION_BANNER = <<-VERSION
bel #{BEL::VERSION}
Copyright (C) 2015 OpenBEL
Apache License, Version 2.0, January 2004
http://www.apache.org/licenses/
VERSION

module BEL
  module Commands

    class BelCommand

      def run
        Trollop::options do
          synopsis "A set of commands to process BEL knowledge."
          usage    "[OPTIONS]... COMMAND"
          version  ::VERSION_BANNER

          opt      :verbose, 'Verbose output.',
                   :long  => :verbose,
                   :short => :v
          stop_on_unknown
        end

        BelCommand.fail_unless_subcommand
      end

      def self.fail_unless_subcommand
        Trollop::educate if ARGV.empty?
      end
    end

    class ParseCommand

      def run
        parsed_options =
          Trollop::options do
            synopsis "Shows parse of BEL script."
            usage    "[OPTIONS]... parse [OPTIONS]"

            opt      :bel,       'The BEL script to parse and output. If not provided the default is to read from standard in (STDIN).',
                     :type    => String,
                     :long    => :bel,
                     :short   => :b,
                     :default => nil
          end

        if parsed_options[:bel]
          ARGV.concat(['--bel', parsed_options[:bel]])
        else
          Trollop::educate if !ARGV.empty?
        end

        require_relative 'bel_parse'
      end
    end

    class Bel2rdfCommand

      def run
        parsed_options =
          Trollop::options do
            synopsis "Converts BEL to RDF."
            usage    "[OPTIONS]... bel2rdf [OPTIONS]"

            opt      :bel,       'The BEL script to parse and output (Defaults to STDIN).',
                     :type    => String,
                     :long    => :bel,
                     :short   => :b,
                     :default => nil

            opt      :format,    'The RDF format to output.',
                     :type    => String,
                     :long    => :format,
                     :short   => :f,
                     :default => 'ntriples'

            opt      :schema,    'Includes the BEL RDFS schema in RDF output.',
                     :long    => :schema,
                     :short   => :s,
                     :default => false
          end

        ARGV.concat(['--bel',    parsed_options[:bel]])    if parsed_options[:bel]
        ARGV.concat(['--format', parsed_options[:format]]) if parsed_options[:format]
        ARGV.concat(['--schema', parsed_options[:schema]]) if parsed_options[:schema]

        require_relative 'bel2rdf'
      end
    end
  end
end

BEL::Commands::BelCommand.new.run

sub_command = ARGV.shift
sub_class   = :"#{sub_command.capitalize}Command"

if BEL::Commands.const_defined?(sub_class)
  BEL::Commands.const_get(sub_class).new.run
else
  $stderr.puts "error: The command #{sub_command} is not valid.\n\n"
  Trollop::educate
end
