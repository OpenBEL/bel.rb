#!/usr/bin/env ruby
$:.unshift(File.join(File.expand_path(File.dirname(__FILE__)), '..', 'lib'))
require 'erb'
require 'bel'
require 'bel/util'
require 'bel/vendor/trollop'

VERSION_BANNER = <<-VERSION
bel #{BEL::Version}
Copyright (C) #{Time.now.year} OpenBEL
Apache License, Version 2.0, January 2004
http://www.apache.org/licenses/
VERSION

module BEL
  module Commands

    class BelCommand

      attr_reader :global_options

      def initialize(sub_commands)
        @sub_commands = sub_commands
      end

      def run
        with_this_binding = binding
        @global_options = Trollop::options do
          synopsis ERB.new(
          <<-SYNOPSIS
A set of commands to process BEL knowledge.

Subcommands:
<% @sub_commands.each do |cmd| %>
  <%= cmd %><% end %>
          SYNOPSIS
          ).result(with_this_binding)
          usage    "[OPTIONS]... COMMAND"
          version  ::VERSION_BANNER

          opt      :verbose, 'Verbose output.',
                   :long  => :verbose,
                   :short => :v
          stop_on_unknown
        end

        BelCommand.fail_unless_subcommand
      end

      def self.fail_unless_subcommand
        Trollop::educate if ARGV.empty?
      end
    end

    class Bel2rdfCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def run
        parsed_options =
          Trollop::options do
            synopsis "Converts BEL to RDF."
            usage    "[OPTIONS]... bel2rdf [OPTIONS]"

            opt      :bel,                 'The BEL script to parse and output (Defaults to STDIN).',
                     :type              => String,
                     :long              => :bel,
                     :short             => :b,
                     :default           => nil

            opt      :format,              'The RDF format to output.',
                     :type              => String,
                     :long              => :format,
                     :short             => :f,
                     :default           => 'ntriples'

            opt      :schema,              'Includes the BEL RDFS schema in RDF output.',
                     :long              => :schema,
                     :short             => :s,
                     :default           => false

            opt      :'rdf-prefix-file',   "A YAML file mapping prefix containing key/value pairs. The key is an RDF prefix to use in the RDF output; the value is the RDF URI for that prefix. For example, belv: 'http://www.openbel.org/vocabulary/'",
                     :type              => String,
                     :long              => :'rdf-prefix-file',
                     :short             => :p,
                     :default           => nil

            opt      :'remap-file',        'A YAML file that remaps annotation and namespace definitions. Run "bel remapfile" to get an example of the YAML format.',
                     :type              => String,
                     :long              => :'remap-file',
                     :short             => :r,
                     :default           => nil
          end

        ARGV.concat(['--bel',             parsed_options[:bel]])               if parsed_options[:bel]
        ARGV.concat(['--format',          parsed_options[:format]])            if parsed_options[:format]
        ARGV.concat(['--schema',          parsed_options[:schema]])            if parsed_options[:schema]
        ARGV.concat(['--rdf-prefix-file', parsed_options[:'rdf-prefix-file']]) if parsed_options[:'rdf-prefix-file']
        ARGV.concat(['--remap-file',      parsed_options[:'remap-file']])      if parsed_options[:'remap-file']

        require_relative 'bel2rdf'
      end
    end

    class CompareCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def run
        parsed_options =
          Trollop::options do
            synopsis "Compares knowledge in two BEL script files."
            usage    "[OPTIONS]... compare FILE1 FILE2"
          end

        # Error if two file arguments were not provided.
        Trollop::educate unless ARGV.size == 2

        # Error if file arguments are not readable.
        missing = ARGV.select { |arg|
          !File.readable?(arg)
        }
        if !missing.empty?
          missing.each do |arg|
            $stderr.puts %Q{File "#{arg}" is not readable.}
          end
          $stderr.puts
          Trollop::educate
        end

        ARGV.insert(0, '--verbose') if @global_options[:verbose]
        require_relative 'bel_compare'
      end
    end

    class ParseCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def run
        parsed_options =
          Trollop::options do
            synopsis "Shows parse of BEL script."
            usage    "[OPTIONS]... parse [OPTIONS]"

            opt      :bel,       'The BEL script to parse and output. If not provided the default is to read from standard in (STDIN).',
                     :type    => String,
                     :long    => :bel,
                     :short   => :b,
                     :default => nil
          end

        if parsed_options[:bel]
          ARGV.concat(['--bel', parsed_options[:bel]])
        else
          Trollop::educate if !ARGV.empty?
        end

        require_relative 'bel_parse'
      end
    end

    class RdfschemaCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def run
        parsed_options =
          Trollop::options do
            synopsis "Outputs the RDFS (e.g. RDF Schema) for BEL."
            usage    "[OPTIONS]... rdfschema [OPTIONS]"

            opt      :format,    'The RDF format to output.',
                     :type    => String,
                     :long    => :format,
                     :short   => :f,
                     :default => 'ntriples'
          end

        formats = ['nquads', 'ntriples', 'turtle']
        unless formats.include? parsed_options[:format]
          fmt = parsed_options[:format]
          $stderr.puts %Q{Format "#{fmt}" must be one of #{formats.join(' ')}.}
          $stderr.puts
          Trollop::educate
        end

        ARGV.concat(['--format', parsed_options[:format]]) if parsed_options[:format]
        require_relative 'bel_rdfschema'
      end
    end

    class SummarizeCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def run
        parsed_options =
          Trollop::options do
            synopsis "Show summary statistics. for knowledge in provided BEL script."
            usage    "[OPTIONS]... summarize [OPTIONS]"

            opt      :bel,       'The BEL script to parse and output. If not provided the default is to read from standard in (STDIN).',
                     :type    => String,
                     :long    => :bel,
                     :short   => :b,
                     :default => nil
          end

        if parsed_options[:bel]
          ARGV.concat(['--bel', parsed_options[:bel]])
        else
          Trollop::educate if !ARGV.empty?
        end

        require_relative 'bel_summarize'
      end
    end

    class TranslateCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def which_io(input_file)
        case input_file
        when nil
          $stdin
        when '-'
          $stdin
        else
          input_file
        end
      end

      def run
        parsed_options =
          Trollop::options do
            synopsis "Translates BEL nanopubs between formats using translator plugins."
            usage    <<-DOC.gsub(/^ {14}/, '')
              [OPTIONS]... translate [OPTIONS] FROM_TRANSLATOR TO_TRANSLATOR

              From options:
                None
              To options:
                streaming=true|false
                  Set to "true" to enable streaming writes for translators that support it.
                  Set to "false" to disable streaming.
                serialization=discrete|topdown|citation [BEL Script translator]
                  Set to "discrete" to render each statement with its annotations.
                  Set to "topdown" to set/unset annotations as needed.
                  Set to "citation" to use statement groups for each citation.
                write_schema=true|false
                  Set to "true" to write RDFS schema for RDF-based translators.
                  Set to "false" to omit RDFS schema for RDF-based translators.
                void_dataset_uri=URI
                  The VoID dataset URI to use for the dataset of an RDF-based translation.
                rdf_prefix_file=FILE
                  A YAML file mapping prefix containing key/value pairs. The key is an
                  RDF prefix to use in the RDF output; the value is the RDF URI for that
                  prefix. For example, belv: 'http://www.openbel.org/vocabulary/'.
                remap_file=FILE
                  A YAML file that remaps annotation and namespace definitions.
                  Run "bel remapfile" to get an example of the YAML format.
            DOC

            opt      :'input-file', 'The file containing nanopubs to translate. If not specified the default is to read from STDIN.',
                     :type    => String,
                     :long    => :'input-file',
                     :short   => :i,
                     :default => nil

            opt      :'from-option', 'A "key=value" option to be sent to the FROM_TRANSLATOR.',
                     :type    => String,
                     :multi   => true,
                     :long    => :'from-option',
                     :short   => :f,
                     :default => nil

            opt      :'to-option', 'A "key=value" option to be sent to the TO_TRANSLATOR.',
                     :type    => String,
                     :multi   => true,
                     :long    => :'to-option',
                     :short   => :t,
                     :default => nil
          end

        input_io = which_io(parsed_options[:'input-file'])

        if ![$stdin, '-'].include?(input_io)
          unless File.readable?(input_io)
            $stderr.puts %Q{File "#{input_io}" is not readable.}
            $stderr.puts
            Trollop::educate
          end
        end

        unless ARGV.size == 2
          $stderr.puts %Q{Formats were not provided.}
          $stderr.puts
          Trollop::educate
        end

        from_format, to_format = ARGV

        from = BEL.translator(from_format)
        unless from
          $stderr.puts(
            from_format ?
              %Q{The format "#{from_format}" is not available.} :
              "The from_format argument was not specified."
          )
          $stderr.puts
          Trollop::educate
        end

        to   = BEL.translator(to_format)
        unless to
          $stderr.puts(
            to_format ?
              %Q{The format "#{to_format}" is not available."} :
              "The to_format argument was not specified."
          )
          $stderr.puts
          Trollop::educate
        end

        # XXX Merge conflicts.
        options = {}.
          merge(map_kv_options(parsed_options, :'from-option')).
          merge(map_kv_options(parsed_options, :'to-option'))

        begin
          BEL.translate(
            input_io,
            from_format,
            to_format,
            $stdout,
            options
          )
        ensure
          $stdout.close
        end
      end

      private

      def map_kv_options(parsed_options, opt)
        BEL.keys_to_symbols(
          Hash[
            parsed_options[opt].map { |opt|
              key, value = opt.split('=')
              if !key || !value
                nil
              else
                value =
                  case value
                  when "true"
                    true
                  when "false"
                    false
                  else
                    value
                  end

                [key, value]
              end
            }.compact
          ]
        )
      end
    end

    class UpgradeCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def run
        parsed_options =
          Trollop::options do
            synopsis "Upgrades BEL knowledge and annotation."
            usage    "[OPTIONS]... upgrade [OPTIONS]"

            opt      :bel,       'The BEL script to parse and output. If not provided the default is to read from standard in (STDIN).',
                     :type    => String,
                     :long    => :bel,
                     :short   => :b,
                     :default => nil

            opt      :changelog, 'The changelog JSON file or URL.',
                     :type    => String,
                     :long    => :changelog,
                     :short   => :c,
                     :default => 'http://resource.belframework.org/belframework/latest-release/change_log.json'
          end

        if parsed_options[:bel]
          ARGV.concat(['--bel', parsed_options[:bel]])
        else
          Trollop::educate if !ARGV.empty?
        end

        ARGV.concat(['--changelog', parsed_options[:changelog]])

        require_relative 'bel_upgrade'
      end
    end

    class PluginsCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def run
        options = Trollop::options do
          synopsis "Interact with available plugins."
          usage    "[OPTIONS]... plugins [OPTIONS]"
          opt      :list,  'Lists available plugins',
                   :long    => :list,
                   :short   => :l,
                   :default => true
        end

        if options[:list]
          $stdout.puts "RDF Repository plugins"
          $stdout.puts "----------------------"
          $stdout.puts
          BEL::RdfRepository.plugins.
            values.
            sort_by { |plugin| plugin.name}.
            each do |plugin|
              $stdout.puts %Q{
                Name:        #{plugin.name}
                Description: #{plugin.description}
              }.gsub(%r{^\s+}, ' ')
            end

          $stdout.puts "Resource Search plugins"
          $stdout.puts "-----------------------"
          $stdout.puts
          BEL::Resource::Search.plugins.
            values.
            sort_by { |plugin| plugin.name}.
            each do |plugin|
              $stdout.puts %Q{
                Name:        #{plugin.name}
                Description: #{plugin.description}
              }.gsub(%r{^\s+}, ' ')
            end

          $stdout.puts "Translator plugins"
          $stdout.puts "------------------"
          $stdout.puts
          BEL::Translator.plugins.
            values.
            sort_by { |plugin| plugin.name}.
            each do |plugin|
              $stdout.puts %Q{
                Name:        #{plugin.name}
                Description: #{plugin.description}
              }.gsub(%r{^\s+}, ' ')
            end
        end
      end
    end

    class GenerateCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def run
        options = Trollop::options do
          synopsis "Generates random BEL Nanopubs and serializes through a bel.rb translator."
          usage    "[OPTIONS]... generator [OPTIONS]"
          opt      :limit,         'The number of BEL Nanopubs to generate; default is no limit.',
                   :long        => :limit,
                   :short       => :l,
                   :default     => -1

          opt      :translator,    'ID for bel.rb translator; defaults to "bel"',
                   :long        => :translator,
                   :short       => :t,
                   :default     => 'bel'

          opt      :sample,        'Sample namespace values and annotations from BEL resources.',
                   :long        => :sample,
                   :short       => :s,
                   :default     => false
        end

        # require BEL generator and include in GenerateCommand
        require 'bel/gen'
        self.class.include(BEL::Gen::Nanopub)
        self.class.include(BEL::Gen::SampleResources) if options[:sample]

        # create enumerator of random nanopubs
        limit       = options[:limit].to_i
        random_data = Enumerator.new do |yielder|
          count = 0
          while count != limit do
            yielder << nanopub
            count += 1
            $stderr.puts "#{count} nanopubs generated..." if count % 500 == 0
          end
        end

        # write random nanopubs to STDOUT through a translator
        translator_id = options[:translator] || :bel
        translator    = BEL.translator(options[:translator] || :bel)
        unless translator
          $stderr.puts %Q{Cannot find the "#{translator_id}" plugin.}
          exit 1
        end

        translator.write(random_data, $stdout)
      end
    end

    class RemapfileCommand

      def initialize(global_options)
        @global_options = global_options
      end

      def run
        options = Trollop::options do
          synopsis "Writes an example resource remap YAML file."
          usage    "[OPTIONS]... remapfile [OPTIONS]"
        end

        example_file_path =
          File.join(
            File.expand_path(File.dirname(__FILE__)),
            '..',
            'lib',
            'bel',
            'examples',
            'remap-file-example.yml')
        File.open(example_file_path) do |f|
          $stdout.write(f.read)
        end
      end
    end
  end
end

def find_subcommands_in_module(mod)
  mod.constants.map(&:to_s).select { |constant|
    constant.end_with?('Command')
  }.map { |cmd|
    cmd.sub(/Command$/, '').downcase
  }
end

# Run bel command
bel_command     = BEL::Commands::BelCommand.new(
  find_subcommands_in_module(BEL::Commands) - ['bel']
)
bel_command.run

global_options  = bel_command.global_options

# Run subcommand
sub_command     = ARGV.shift
sub_class       = :"#{sub_command.capitalize}Command"
if BEL::Commands.const_defined?(sub_class)
  BEL::Commands.const_get(sub_class).new(global_options).run
else
  $stderr.puts "error: The command #{sub_command} is not valid.\n\n"
  Trollop::educate
end
